/*problem description
有一个二维迷宫，n行m列，‘s’表示迷宫的起点，‘T’表示迷宫的终点，‘#’表示围墙，‘.’表示通路。
现在从S出发，你不能穿墙，问到达终点T最少需要多少步？
输入格式
第一行输入n,m（1<=n,m<=50）表示迷宫的行列大小。
接下来输入n行字符串表示迷宫。
输出格式
一个整数，表示走出迷宫所需的最小步数，若走不出迷宫则输出 -1。
样例输入1
2 3
S.#
..T
样例输出1
3

样例输入2
3 3
S.#
.#.
.#T
样例输出2
 -1
 */
#include<iostream>
#include<queue>
#define MAX 101
using namespace std;



char map[MAX][MAX];
int vis[MAX][MAX]={0};
int dir[4][2]={{1,0},{0,1},{-1,0},{0,-1}};

int n,m,flag,val;


struct point{//将坐标看做结构体在队列中操作 
	int x,y,num;
	point(int xx,int yy,int dd){
		x=xx;
		y=yy;
		num=dd;
	}
};
queue<point> q;//声明结构体点队列

void bfs(int sx,int sy){
	q.push(point(sx,sy,0));//将起始点放入队列
	vis[sx][sy]=1;
	while(!q.empty())//只要队列不空 
	{
		point p=q.front();
		q.pop();
		if(map[p.x][p.y]=='T'){
			val=p.num;
			flag=1;
			break;
		}
		for(int i=0;i<4;++i){
				int a=p.x+dir[i][0];
				int b=p.y+dir[i][1];
				if(map[a][b]!='#'&&vis[a][b]==0&&a>=0&&b>=0&&a<n&&b<m){
					q.push(point(a,b,p.num+1));//同一次循环中(搜索深度相同)的num数是相同的 
					vis[a][b]=1;//标记 
				}
		}
	} 
}

int main()
{
	int s1,s2;
	flag=0;
	cin>>n>>m;
	for(int i=0;i<n;++i){
		cin>>map[i];
	}
	for(int i=0;i<n;++i){
		for(int j=0;j<m;++j){
			if(map[i][j]=='S'){
				s1=i;
				s2=j;
			}
		}
	}
	bfs(s1,s2);
	if(flag==0) cout<<"-1"<<endl;
	else cout<<val<<endl;
	return 0;
}

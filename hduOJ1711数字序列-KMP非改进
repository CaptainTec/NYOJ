//KMP算法，非改进....
//用时1216ms... 
#include <cstdio>
#include <cstring>
int nn[1000005], mm[10005], next[10005];

void getNext(int m)
{
	next[0] = -1;
	int i=0, j = -1;
	while(i<m)//i不需要回溯 
	{
		if(j==-1 || mm[i]==mm[j])
		{
			++i;
			++j;
			next[i] = j;
		}
		else j = next[j];//j回溯 
	}
//	for(int i=0;i<m;++i) printf("%d ", next[i]);//看一下next数组 
}

int KMP(int n, int m)
{
	int i = 0, j = 0;
	while(i<m && j<n)
	{
		if(i==-1 || mm[i]==nn[j])
		{
			++i;
			++j;
		}
		else	i = next[i];
	}
	if(i==m) return j-m+1;//若匹配成功，则返回主串的能匹配成功的第一个元素的数组下标 + 1 
	else return -1;
}

int main()
{
	int t, n, m;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d%d",&n, &m);
		for(int i=0;i<n;++i)
			scanf("%d",&nn[i]);
		for(int i=0;i<m;++i)
			scanf("%d",&mm[i]);
		memset(next,0,sizeof(next));
		getNext(m); 
		int res = KMP(n,m);
		printf("%d\n",res);
	} 
    return 0;
}
